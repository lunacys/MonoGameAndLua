using ImGuiNET;

namespace MonoGameAndLua
{
	[MoonSharp.Interpreter.MoonSharpUserData]
	public static class ImGuiWrapper
	{
		public static System.Boolean SliderAngle(System.String label, ref System.Single vRad, System.Single vDegreesMin, System.Single vDegreesMax, System.String format) => ImGui.SliderAngle(label, ref vRad, vDegreesMin, vDegreesMax, format);
		public static System.Boolean SliderFloat(System.String label, ref System.Single v, System.Single vMin, System.Single vMax) => ImGui.SliderFloat(label, ref v, vMin, vMax);
		public static System.Boolean SliderFloat(System.String label, ref System.Single v, System.Single vMin, System.Single vMax, System.String format) => ImGui.SliderFloat(label, ref v, vMin, vMax, format);
		public static System.Boolean SliderFloat(System.String label, ref System.Single v, System.Single vMin, System.Single vMax, System.String format, System.Single power) => ImGui.SliderFloat(label, ref v, vMin, vMax, format, power);
		public static System.Boolean SliderFloat2(System.String label, ref System.Numerics.Vector2 v, System.Single vMin, System.Single vMax) => ImGui.SliderFloat2(label, ref v, vMin, vMax);
		public static System.Boolean SliderFloat2(System.String label, ref System.Numerics.Vector2 v, System.Single vMin, System.Single vMax, System.String format) => ImGui.SliderFloat2(label, ref v, vMin, vMax, format);
		public static System.Boolean SliderFloat2(System.String label, ref System.Numerics.Vector2 v, System.Single vMin, System.Single vMax, System.String format, System.Single power) => ImGui.SliderFloat2(label, ref v, vMin, vMax, format, power);
		public static System.Boolean SliderFloat3(System.String label, ref System.Numerics.Vector3 v, System.Single vMin, System.Single vMax) => ImGui.SliderFloat3(label, ref v, vMin, vMax);
		public static System.Boolean SliderFloat3(System.String label, ref System.Numerics.Vector3 v, System.Single vMin, System.Single vMax, System.String format) => ImGui.SliderFloat3(label, ref v, vMin, vMax, format);
		public static System.Boolean SliderFloat3(System.String label, ref System.Numerics.Vector3 v, System.Single vMin, System.Single vMax, System.String format, System.Single power) => ImGui.SliderFloat3(label, ref v, vMin, vMax, format, power);
		public static System.Boolean SliderFloat4(System.String label, ref System.Numerics.Vector4 v, System.Single vMin, System.Single vMax) => ImGui.SliderFloat4(label, ref v, vMin, vMax);
		public static System.Boolean SliderFloat4(System.String label, ref System.Numerics.Vector4 v, System.Single vMin, System.Single vMax, System.String format) => ImGui.SliderFloat4(label, ref v, vMin, vMax, format);
		public static System.Boolean SliderFloat4(System.String label, ref System.Numerics.Vector4 v, System.Single vMin, System.Single vMax, System.String format, System.Single power) => ImGui.SliderFloat4(label, ref v, vMin, vMax, format, power);
		public static System.Boolean SliderInt(System.String label, ref System.Int32 v, System.Int32 vMin, System.Int32 vMax) => ImGui.SliderInt(label, ref v, vMin, vMax);
		public static System.Boolean SliderInt(System.String label, ref System.Int32 v, System.Int32 vMin, System.Int32 vMax, System.String format) => ImGui.SliderInt(label, ref v, vMin, vMax, format);
		public static System.Boolean SliderInt2(System.String label, ref System.Int32 v, System.Int32 vMin, System.Int32 vMax) => ImGui.SliderInt2(label, ref v, vMin, vMax);
		public static System.Boolean SliderInt2(System.String label, ref System.Int32 v, System.Int32 vMin, System.Int32 vMax, System.String format) => ImGui.SliderInt2(label, ref v, vMin, vMax, format);
		public static System.Boolean SliderInt3(System.String label, ref System.Int32 v, System.Int32 vMin, System.Int32 vMax) => ImGui.SliderInt3(label, ref v, vMin, vMax);
		public static System.Boolean SliderInt3(System.String label, ref System.Int32 v, System.Int32 vMin, System.Int32 vMax, System.String format) => ImGui.SliderInt3(label, ref v, vMin, vMax, format);
		public static System.Boolean SliderInt4(System.String label, ref System.Int32 v, System.Int32 vMin, System.Int32 vMax) => ImGui.SliderInt4(label, ref v, vMin, vMax);
		public static System.Boolean SliderInt4(System.String label, ref System.Int32 v, System.Int32 vMin, System.Int32 vMax, System.String format) => ImGui.SliderInt4(label, ref v, vMin, vMax, format);
		public static System.Boolean SliderScalar(System.String label, ImGuiNET.ImGuiDataType dataType, System.IntPtr pData, System.IntPtr pMin, System.IntPtr pMax) => ImGui.SliderScalar(label, dataType, pData, pMin, pMax);
		public static System.Boolean SliderScalar(System.String label, ImGuiNET.ImGuiDataType dataType, System.IntPtr pData, System.IntPtr pMin, System.IntPtr pMax, System.String format) => ImGui.SliderScalar(label, dataType, pData, pMin, pMax, format);
		public static System.Boolean SliderScalar(System.String label, ImGuiNET.ImGuiDataType dataType, System.IntPtr pData, System.IntPtr pMin, System.IntPtr pMax, System.String format, System.Single power) => ImGui.SliderScalar(label, dataType, pData, pMin, pMax, format, power);
		public static System.Boolean SliderScalarN(System.String label, ImGuiNET.ImGuiDataType dataType, System.IntPtr pData, System.Int32 components, System.IntPtr pMin, System.IntPtr pMax) => ImGui.SliderScalarN(label, dataType, pData, components, pMin, pMax);
		public static System.Boolean SliderScalarN(System.String label, ImGuiNET.ImGuiDataType dataType, System.IntPtr pData, System.Int32 components, System.IntPtr pMin, System.IntPtr pMax, System.String format) => ImGui.SliderScalarN(label, dataType, pData, components, pMin, pMax, format);
		public static System.Boolean SliderScalarN(System.String label, ImGuiNET.ImGuiDataType dataType, System.IntPtr pData, System.Int32 components, System.IntPtr pMin, System.IntPtr pMax, System.String format, System.Single power) => ImGui.SliderScalarN(label, dataType, pData, components, pMin, pMax, format, power);
		public static System.Boolean SmallButton(System.String label) => ImGui.SmallButton(label);
		public static void Spacing() => ImGui.Spacing();
		public static void StyleColorsClassic() => ImGui.StyleColorsClassic();
		public static void StyleColorsClassic(ImGuiNET.ImGuiStylePtr dst) => ImGui.StyleColorsClassic(dst);
		public static void StyleColorsDark() => ImGui.StyleColorsDark();
		public static void StyleColorsDark(ImGuiNET.ImGuiStylePtr dst) => ImGui.StyleColorsDark(dst);
		public static void StyleColorsLight() => ImGui.StyleColorsLight();
		public static void StyleColorsLight(ImGuiNET.ImGuiStylePtr dst) => ImGui.StyleColorsLight(dst);
		public static void Text(System.String fmt) => ImGui.Text(fmt);
		public static void TextColored(System.Numerics.Vector4 col, System.String fmt) => ImGui.TextColored(col, fmt);
		public static void TextDisabled(System.String fmt) => ImGui.TextDisabled(fmt);
		public static void TextUnformatted(System.String text) => ImGui.TextUnformatted(text);
		public static void TextWrapped(System.String fmt) => ImGui.TextWrapped(fmt);
		public static System.Boolean TreeNode(System.String label) => ImGui.TreeNode(label);
		public static System.Boolean TreeNode(System.String strId, System.String fmt) => ImGui.TreeNode(strId, fmt);
		public static System.Boolean TreeNode(System.IntPtr ptrId, System.String fmt) => ImGui.TreeNode(ptrId, fmt);
		public static System.Boolean TreeNodeEx(System.String label) => ImGui.TreeNodeEx(label);
		public static System.Boolean TreeNodeEx(System.String label, ImGuiNET.ImGuiTreeNodeFlags flags) => ImGui.TreeNodeEx(label, flags);
		public static System.Boolean TreeNodeEx(System.String strId, ImGuiNET.ImGuiTreeNodeFlags flags, System.String fmt) => ImGui.TreeNodeEx(strId, flags, fmt);
		public static System.Boolean TreeNodeEx(System.IntPtr ptrId, ImGuiNET.ImGuiTreeNodeFlags flags, System.String fmt) => ImGui.TreeNodeEx(ptrId, flags, fmt);
		public static void TreePop() => ImGui.TreePop();
		public static void TreePush(System.String strId) => ImGui.TreePush(strId);
		public static void TreePush() => ImGui.TreePush();
		public static void TreePush(System.IntPtr ptrId) => ImGui.TreePush(ptrId);
		public static void Unindent() => ImGui.Unindent();
		public static void Unindent(System.Single indentW) => ImGui.Unindent(indentW);
		public static void Value(System.String prefix, System.Boolean b) => ImGui.Value(prefix, b);
		public static void Value(System.String prefix, System.Int32 v) => ImGui.Value(prefix, v);
		public static void Value(System.String prefix, System.UInt32 v) => ImGui.Value(prefix, v);
		public static void Value(System.String prefix, System.Single v) => ImGui.Value(prefix, v);
		public static void Value(System.String prefix, System.Single v, System.String floatFormat) => ImGui.Value(prefix, v, floatFormat);
		public static System.Boolean VSliderFloat(System.String label, System.Numerics.Vector2 size, ref System.Single v, System.Single vMin, System.Single vMax) => ImGui.VSliderFloat(label, size, ref v, vMin, vMax);
		public static System.Boolean VSliderFloat(System.String label, System.Numerics.Vector2 size, ref System.Single v, System.Single vMin, System.Single vMax, System.String format) => ImGui.VSliderFloat(label, size, ref v, vMin, vMax, format);
		public static System.Boolean VSliderFloat(System.String label, System.Numerics.Vector2 size, ref System.Single v, System.Single vMin, System.Single vMax, System.String format, System.Single power) => ImGui.VSliderFloat(label, size, ref v, vMin, vMax, format, power);
		public static System.Boolean VSliderInt(System.String label, System.Numerics.Vector2 size, ref System.Int32 v, System.Int32 vMin, System.Int32 vMax) => ImGui.VSliderInt(label, size, ref v, vMin, vMax);
		public static System.Boolean VSliderInt(System.String label, System.Numerics.Vector2 size, ref System.Int32 v, System.Int32 vMin, System.Int32 vMax, System.String format) => ImGui.VSliderInt(label, size, ref v, vMin, vMax, format);
		public static System.Boolean VSliderScalar(System.String label, System.Numerics.Vector2 size, ImGuiNET.ImGuiDataType dataType, System.IntPtr pData, System.IntPtr pMin, System.IntPtr pMax) => ImGui.VSliderScalar(label, size, dataType, pData, pMin, pMax);
		public static System.Boolean VSliderScalar(System.String label, System.Numerics.Vector2 size, ImGuiNET.ImGuiDataType dataType, System.IntPtr pData, System.IntPtr pMin, System.IntPtr pMax, System.String format) => ImGui.VSliderScalar(label, size, dataType, pData, pMin, pMax, format);
		public static System.Boolean VSliderScalar(System.String label, System.Numerics.Vector2 size, ImGuiNET.ImGuiDataType dataType, System.IntPtr pData, System.IntPtr pMin, System.IntPtr pMax, System.String format, System.Single power) => ImGui.VSliderScalar(label, size, dataType, pData, pMin, pMax, format, power);
		public static System.Boolean InputText(System.String label, System.Byte[] buf, System.UInt32 bufSize) => ImGui.InputText(label, buf, bufSize);
		public static System.Boolean InputText(System.String label, System.Byte[] buf, System.UInt32 bufSize, ImGuiNET.ImGuiInputTextFlags flags) => ImGui.InputText(label, buf, bufSize, flags);
		public static System.Boolean InputText(System.String label, System.Byte[] buf, System.UInt32 bufSize, ImGuiNET.ImGuiInputTextFlags flags, ImGuiNET.ImGuiInputTextCallback callback) => ImGui.InputText(label, buf, bufSize, flags, callback);
		public static System.Boolean InputText(System.String label, System.Byte[] buf, System.UInt32 bufSize, ImGuiNET.ImGuiInputTextFlags flags, ImGuiNET.ImGuiInputTextCallback callback, System.IntPtr userData) => ImGui.InputText(label, buf, bufSize, flags, callback, userData);
		public static System.Boolean InputText(System.String label, ref System.String input, System.UInt32 maxLength) => ImGui.InputText(label, ref input, maxLength);
		public static System.Boolean InputText(System.String label, ref System.String input, System.UInt32 maxLength, ImGuiNET.ImGuiInputTextFlags flags) => ImGui.InputText(label, ref input, maxLength, flags);
		public static System.Boolean InputText(System.String label, ref System.String input, System.UInt32 maxLength, ImGuiNET.ImGuiInputTextFlags flags, ImGuiNET.ImGuiInputTextCallback callback) => ImGui.InputText(label, ref input, maxLength, flags, callback);
		public static System.Boolean InputText(System.String label, ref System.String input, System.UInt32 maxLength, ImGuiNET.ImGuiInputTextFlags flags, ImGuiNET.ImGuiInputTextCallback callback, System.IntPtr userData) => ImGui.InputText(label, ref input, maxLength, flags, callback, userData);
		public static System.Boolean InputTextMultiline(System.String label, ref System.String input, System.UInt32 maxLength, System.Numerics.Vector2 size) => ImGui.InputTextMultiline(label, ref input, maxLength, size);
		public static System.Boolean InputTextMultiline(System.String label, ref System.String input, System.UInt32 maxLength, System.Numerics.Vector2 size, ImGuiNET.ImGuiInputTextFlags flags) => ImGui.InputTextMultiline(label, ref input, maxLength, size, flags);
		public static System.Boolean InputTextMultiline(System.String label, ref System.String input, System.UInt32 maxLength, System.Numerics.Vector2 size, ImGuiNET.ImGuiInputTextFlags flags, ImGuiNET.ImGuiInputTextCallback callback) => ImGui.InputTextMultiline(label, ref input, maxLength, size, flags, callback);
		public static System.Boolean InputTextMultiline(System.String label, ref System.String input, System.UInt32 maxLength, System.Numerics.Vector2 size, ImGuiNET.ImGuiInputTextFlags flags, ImGuiNET.ImGuiInputTextCallback callback, System.IntPtr userData) => ImGui.InputTextMultiline(label, ref input, maxLength, size, flags, callback, userData);
		public static System.Boolean InputText(System.String label, System.IntPtr buf, System.UInt32 bufSize) => ImGui.InputText(label, buf, bufSize);
		public static System.Boolean InputText(System.String label, System.IntPtr buf, System.UInt32 bufSize, ImGuiNET.ImGuiInputTextFlags flags) => ImGui.InputText(label, buf, bufSize, flags);
		public static System.Boolean InputText(System.String label, System.IntPtr buf, System.UInt32 bufSize, ImGuiNET.ImGuiInputTextFlags flags, ImGuiNET.ImGuiInputTextCallback callback) => ImGui.InputText(label, buf, bufSize, flags, callback);
		public static System.Boolean InputText(System.String label, System.IntPtr buf, System.UInt32 bufSize, ImGuiNET.ImGuiInputTextFlags flags, ImGuiNET.ImGuiInputTextCallback callback, System.IntPtr userData) => ImGui.InputText(label, buf, bufSize, flags, callback, userData);
		public static System.Boolean Begin(System.String name, ImGuiNET.ImGuiWindowFlags flags) => ImGui.Begin(name, flags);
		public static System.Boolean MenuItem(System.String label, System.Boolean enabled) => ImGui.MenuItem(label, enabled);
		public static void SaveIniSettingsToDisk(System.String iniFilename) => ImGui.SaveIniSettingsToDisk(iniFilename);
		public static System.String SaveIniSettingsToMemory() => ImGui.SaveIniSettingsToMemory();
		public static System.String SaveIniSettingsToMemory(out System.UInt32 outIniSize) => ImGui.SaveIniSettingsToMemory(out outIniSize);
		public static System.Boolean Selectable(System.String label) => ImGui.Selectable(label);
		public static System.Boolean Selectable(System.String label, System.Boolean selected) => ImGui.Selectable(label, selected);
		public static System.Boolean Selectable(System.String label, System.Boolean selected, ImGuiNET.ImGuiSelectableFlags flags) => ImGui.Selectable(label, selected, flags);
		public static System.Boolean Selectable(System.String label, System.Boolean selected, ImGuiNET.ImGuiSelectableFlags flags, System.Numerics.Vector2 size) => ImGui.Selectable(label, selected, flags, size);
		public static System.Boolean Selectable(System.String label, ref System.Boolean pSelected) => ImGui.Selectable(label, ref pSelected);
		public static System.Boolean Selectable(System.String label, ref System.Boolean pSelected, ImGuiNET.ImGuiSelectableFlags flags) => ImGui.Selectable(label, ref pSelected, flags);
		public static System.Boolean Selectable(System.String label, ref System.Boolean pSelected, ImGuiNET.ImGuiSelectableFlags flags, System.Numerics.Vector2 size) => ImGui.Selectable(label, ref pSelected, flags, size);
		public static void Separator() => ImGui.Separator();
		public static void SetClipboardText(System.String text) => ImGui.SetClipboardText(text);
		public static void SetColorEditOptions(ImGuiNET.ImGuiColorEditFlags flags) => ImGui.SetColorEditOptions(flags);
		public static void SetColumnOffset(System.Int32 columnIndex, System.Single offsetX) => ImGui.SetColumnOffset(columnIndex, offsetX);
		public static void SetColumnWidth(System.Int32 columnIndex, System.Single width) => ImGui.SetColumnWidth(columnIndex, width);
		public static void SetCurrentContext(System.IntPtr ctx) => ImGui.SetCurrentContext(ctx);
		public static void SetCursorPos(System.Numerics.Vector2 localPos) => ImGui.SetCursorPos(localPos);
		public static void SetCursorPosX(System.Single localX) => ImGui.SetCursorPosX(localX);
		public static void SetCursorPosY(System.Single localY) => ImGui.SetCursorPosY(localY);
		public static void SetCursorScreenPos(System.Numerics.Vector2 pos) => ImGui.SetCursorScreenPos(pos);
		public static System.Boolean SetDragDropPayload(System.String type, System.IntPtr data, System.UInt32 sz) => ImGui.SetDragDropPayload(type, data, sz);
		public static System.Boolean SetDragDropPayload(System.String type, System.IntPtr data, System.UInt32 sz, ImGuiNET.ImGuiCond cond) => ImGui.SetDragDropPayload(type, data, sz, cond);
		public static void SetItemAllowOverlap() => ImGui.SetItemAllowOverlap();
		public static void SetItemDefaultFocus() => ImGui.SetItemDefaultFocus();
		public static void SetKeyboardFocusHere() => ImGui.SetKeyboardFocusHere();
		public static void SetKeyboardFocusHere(System.Int32 offset) => ImGui.SetKeyboardFocusHere(offset);
		public static void SetMouseCursor(ImGuiNET.ImGuiMouseCursor cursorType) => ImGui.SetMouseCursor(cursorType);
		public static void SetNextItemOpen(System.Boolean isOpen) => ImGui.SetNextItemOpen(isOpen);
		public static void SetNextItemOpen(System.Boolean isOpen, ImGuiNET.ImGuiCond cond) => ImGui.SetNextItemOpen(isOpen, cond);
		public static void SetNextItemWidth(System.Single itemWidth) => ImGui.SetNextItemWidth(itemWidth);
		public static void SetNextWindowBgAlpha(System.Single alpha) => ImGui.SetNextWindowBgAlpha(alpha);
		public static void SetNextWindowCollapsed(System.Boolean collapsed) => ImGui.SetNextWindowCollapsed(collapsed);
		public static void SetNextWindowCollapsed(System.Boolean collapsed, ImGuiNET.ImGuiCond cond) => ImGui.SetNextWindowCollapsed(collapsed, cond);
		public static void SetNextWindowContentSize(System.Numerics.Vector2 size) => ImGui.SetNextWindowContentSize(size);
		public static void SetNextWindowFocus() => ImGui.SetNextWindowFocus();
		public static void SetNextWindowPos(System.Numerics.Vector2 pos) => ImGui.SetNextWindowPos(pos);
		public static void SetNextWindowPos(System.Numerics.Vector2 pos, ImGuiNET.ImGuiCond cond) => ImGui.SetNextWindowPos(pos, cond);
		public static void SetNextWindowPos(System.Numerics.Vector2 pos, ImGuiNET.ImGuiCond cond, System.Numerics.Vector2 pivot) => ImGui.SetNextWindowPos(pos, cond, pivot);
		public static void SetNextWindowSize(System.Numerics.Vector2 size) => ImGui.SetNextWindowSize(size);
		public static void SetNextWindowSize(System.Numerics.Vector2 size, ImGuiNET.ImGuiCond cond) => ImGui.SetNextWindowSize(size, cond);
		public static void SetNextWindowSizeConstraints(System.Numerics.Vector2 sizeMin, System.Numerics.Vector2 sizeMax) => ImGui.SetNextWindowSizeConstraints(sizeMin, sizeMax);
		public static void SetNextWindowSizeConstraints(System.Numerics.Vector2 sizeMin, System.Numerics.Vector2 sizeMax, ImGuiNET.ImGuiSizeCallback customCallback) => ImGui.SetNextWindowSizeConstraints(sizeMin, sizeMax, customCallback);
		public static void SetNextWindowSizeConstraints(System.Numerics.Vector2 sizeMin, System.Numerics.Vector2 sizeMax, ImGuiNET.ImGuiSizeCallback customCallback, System.IntPtr customCallbackData) => ImGui.SetNextWindowSizeConstraints(sizeMin, sizeMax, customCallback, customCallbackData);
		public static void SetScrollFromPosX(System.Single localX) => ImGui.SetScrollFromPosX(localX);
		public static void SetScrollFromPosX(System.Single localX, System.Single centerXRatio) => ImGui.SetScrollFromPosX(localX, centerXRatio);
		public static void SetScrollFromPosY(System.Single localY) => ImGui.SetScrollFromPosY(localY);
		public static void SetScrollFromPosY(System.Single localY, System.Single centerYRatio) => ImGui.SetScrollFromPosY(localY, centerYRatio);
		public static void SetScrollHereX() => ImGui.SetScrollHereX();
		public static void SetScrollHereX(System.Single centerXRatio) => ImGui.SetScrollHereX(centerXRatio);
		public static void SetScrollHereY() => ImGui.SetScrollHereY();
		public static void SetScrollHereY(System.Single centerYRatio) => ImGui.SetScrollHereY(centerYRatio);
		public static void SetScrollX(System.Single scrollX) => ImGui.SetScrollX(scrollX);
		public static void SetScrollY(System.Single scrollY) => ImGui.SetScrollY(scrollY);
		public static void SetStateStorage(ImGuiNET.ImGuiStoragePtr storage) => ImGui.SetStateStorage(storage);
		public static void SetTabItemClosed(System.String tabOrDockedWindowLabel) => ImGui.SetTabItemClosed(tabOrDockedWindowLabel);
		public static void SetTooltip(System.String fmt) => ImGui.SetTooltip(fmt);
		public static void SetWindowCollapsed(System.Boolean collapsed) => ImGui.SetWindowCollapsed(collapsed);
		public static void SetWindowCollapsed(System.Boolean collapsed, ImGuiNET.ImGuiCond cond) => ImGui.SetWindowCollapsed(collapsed, cond);
		public static void SetWindowCollapsed(System.String name, System.Boolean collapsed) => ImGui.SetWindowCollapsed(name, collapsed);
		public static void SetWindowCollapsed(System.String name, System.Boolean collapsed, ImGuiNET.ImGuiCond cond) => ImGui.SetWindowCollapsed(name, collapsed, cond);
		public static void SetWindowFocus() => ImGui.SetWindowFocus();
		public static void SetWindowFocus(System.String name) => ImGui.SetWindowFocus(name);
		public static void SetWindowFontScale(System.Single scale) => ImGui.SetWindowFontScale(scale);
		public static void SetWindowPos(System.Numerics.Vector2 pos) => ImGui.SetWindowPos(pos);
		public static void SetWindowPos(System.Numerics.Vector2 pos, ImGuiNET.ImGuiCond cond) => ImGui.SetWindowPos(pos, cond);
		public static void SetWindowPos(System.String name, System.Numerics.Vector2 pos) => ImGui.SetWindowPos(name, pos);
		public static void SetWindowPos(System.String name, System.Numerics.Vector2 pos, ImGuiNET.ImGuiCond cond) => ImGui.SetWindowPos(name, pos, cond);
		public static void SetWindowSize(System.Numerics.Vector2 size) => ImGui.SetWindowSize(size);
		public static void SetWindowSize(System.Numerics.Vector2 size, ImGuiNET.ImGuiCond cond) => ImGui.SetWindowSize(size, cond);
		public static void SetWindowSize(System.String name, System.Numerics.Vector2 size) => ImGui.SetWindowSize(name, size);
		public static void SetWindowSize(System.String name, System.Numerics.Vector2 size, ImGuiNET.ImGuiCond cond) => ImGui.SetWindowSize(name, size, cond);
		public static void ShowAboutWindow() => ImGui.ShowAboutWindow();
		public static void ShowAboutWindow(ref System.Boolean pOpen) => ImGui.ShowAboutWindow(ref pOpen);
		public static void ShowDemoWindow() => ImGui.ShowDemoWindow();
		public static void ShowDemoWindow(ref System.Boolean pOpen) => ImGui.ShowDemoWindow(ref pOpen);
		public static void ShowFontSelector(System.String label) => ImGui.ShowFontSelector(label);
		public static void ShowMetricsWindow() => ImGui.ShowMetricsWindow();
		public static void ShowMetricsWindow(ref System.Boolean pOpen) => ImGui.ShowMetricsWindow(ref pOpen);
		public static void ShowStyleEditor() => ImGui.ShowStyleEditor();
		public static void ShowStyleEditor(ImGuiNET.ImGuiStylePtr @ref) => ImGui.ShowStyleEditor(@ref);
		public static System.Boolean ShowStyleSelector(System.String label) => ImGui.ShowStyleSelector(label);
		public static void ShowUserGuide() => ImGui.ShowUserGuide();
		public static System.Boolean SliderAngle(System.String label, ref System.Single vRad) => ImGui.SliderAngle(label, ref vRad);
		public static System.Boolean SliderAngle(System.String label, ref System.Single vRad, System.Single vDegreesMin) => ImGui.SliderAngle(label, ref vRad, vDegreesMin);
		public static System.Boolean SliderAngle(System.String label, ref System.Single vRad, System.Single vDegreesMin, System.Single vDegreesMax) => ImGui.SliderAngle(label, ref vRad, vDegreesMin, vDegreesMax);
		public static System.Boolean ListBox(System.String label, ref System.Int32 currentItem, System.String[] items, System.Int32 itemsCount) => ImGui.ListBox(label, ref currentItem, items, itemsCount);
		public static System.Boolean ListBox(System.String label, ref System.Int32 currentItem, System.String[] items, System.Int32 itemsCount, System.Int32 heightInItems) => ImGui.ListBox(label, ref currentItem, items, itemsCount, heightInItems);
		public static void ListBoxFooter() => ImGui.ListBoxFooter();
		public static System.Boolean ListBoxHeader(System.String label) => ImGui.ListBoxHeader(label);
		public static System.Boolean ListBoxHeader(System.String label, System.Numerics.Vector2 size) => ImGui.ListBoxHeader(label, size);
		public static System.Boolean ListBoxHeader(System.String label, System.Int32 itemsCount) => ImGui.ListBoxHeader(label, itemsCount);
		public static System.Boolean ListBoxHeader(System.String label, System.Int32 itemsCount, System.Int32 heightInItems) => ImGui.ListBoxHeader(label, itemsCount, heightInItems);
		public static void LoadIniSettingsFromDisk(System.String iniFilename) => ImGui.LoadIniSettingsFromDisk(iniFilename);
		public static void LoadIniSettingsFromMemory(System.String iniData) => ImGui.LoadIniSettingsFromMemory(iniData);
		public static void LoadIniSettingsFromMemory(System.String iniData, System.UInt32 iniSize) => ImGui.LoadIniSettingsFromMemory(iniData, iniSize);
		public static void LogButtons() => ImGui.LogButtons();
		public static void LogFinish() => ImGui.LogFinish();
		public static void LogText(System.String fmt) => ImGui.LogText(fmt);
		public static void LogToClipboard() => ImGui.LogToClipboard();
		public static void LogToClipboard(System.Int32 autoOpenDepth) => ImGui.LogToClipboard(autoOpenDepth);
		public static void LogToFile() => ImGui.LogToFile();
		public static void LogToFile(System.Int32 autoOpenDepth) => ImGui.LogToFile(autoOpenDepth);
		public static void LogToFile(System.Int32 autoOpenDepth, System.String filename) => ImGui.LogToFile(autoOpenDepth, filename);
		public static void LogToTTY() => ImGui.LogToTTY();
		public static void LogToTTY(System.Int32 autoOpenDepth) => ImGui.LogToTTY(autoOpenDepth);
		public static System.IntPtr MemAlloc(System.UInt32 size) => ImGui.MemAlloc(size);
		public static void MemFree(System.IntPtr ptr) => ImGui.MemFree(ptr);
		public static System.Boolean MenuItem(System.String label) => ImGui.MenuItem(label);
		public static System.Boolean MenuItem(System.String label, System.String shortcut) => ImGui.MenuItem(label, shortcut);
		public static System.Boolean MenuItem(System.String label, System.String shortcut, System.Boolean selected) => ImGui.MenuItem(label, shortcut, selected);
		public static System.Boolean MenuItem(System.String label, System.String shortcut, System.Boolean selected, System.Boolean enabled) => ImGui.MenuItem(label, shortcut, selected, enabled);
		public static System.Boolean MenuItem(System.String label, System.String shortcut, ref System.Boolean pSelected) => ImGui.MenuItem(label, shortcut, ref pSelected);
		public static System.Boolean MenuItem(System.String label, System.String shortcut, ref System.Boolean pSelected, System.Boolean enabled) => ImGui.MenuItem(label, shortcut, ref pSelected, enabled);
		public static void NewFrame() => ImGui.NewFrame();
		public static void NewLine() => ImGui.NewLine();
		public static void NextColumn() => ImGui.NextColumn();
		public static void OpenPopup(System.String strId) => ImGui.OpenPopup(strId);
		public static System.Boolean OpenPopupOnItemClick() => ImGui.OpenPopupOnItemClick();
		public static System.Boolean OpenPopupOnItemClick(System.String strId) => ImGui.OpenPopupOnItemClick(strId);
		public static System.Boolean OpenPopupOnItemClick(System.String strId, ImGuiNET.ImGuiMouseButton mouseButton) => ImGui.OpenPopupOnItemClick(strId, mouseButton);
		public static void PlotHistogram(System.String label, ref System.Single values, System.Int32 valuesCount) => ImGui.PlotHistogram(label, ref values, valuesCount);
		public static void PlotHistogram(System.String label, ref System.Single values, System.Int32 valuesCount, System.Int32 valuesOffset) => ImGui.PlotHistogram(label, ref values, valuesCount, valuesOffset);
		public static void PlotHistogram(System.String label, ref System.Single values, System.Int32 valuesCount, System.Int32 valuesOffset, System.String overlayText) => ImGui.PlotHistogram(label, ref values, valuesCount, valuesOffset, overlayText);
		public static void PlotHistogram(System.String label, ref System.Single values, System.Int32 valuesCount, System.Int32 valuesOffset, System.String overlayText, System.Single scaleMin) => ImGui.PlotHistogram(label, ref values, valuesCount, valuesOffset, overlayText, scaleMin);
		public static void PlotHistogram(System.String label, ref System.Single values, System.Int32 valuesCount, System.Int32 valuesOffset, System.String overlayText, System.Single scaleMin, System.Single scaleMax) => ImGui.PlotHistogram(label, ref values, valuesCount, valuesOffset, overlayText, scaleMin, scaleMax);
		public static void PlotHistogram(System.String label, ref System.Single values, System.Int32 valuesCount, System.Int32 valuesOffset, System.String overlayText, System.Single scaleMin, System.Single scaleMax, System.Numerics.Vector2 graphSize) => ImGui.PlotHistogram(label, ref values, valuesCount, valuesOffset, overlayText, scaleMin, scaleMax, graphSize);
		public static void PlotHistogram(System.String label, ref System.Single values, System.Int32 valuesCount, System.Int32 valuesOffset, System.String overlayText, System.Single scaleMin, System.Single scaleMax, System.Numerics.Vector2 graphSize, System.Int32 stride) => ImGui.PlotHistogram(label, ref values, valuesCount, valuesOffset, overlayText, scaleMin, scaleMax, graphSize, stride);
		public static void PlotLines(System.String label, ref System.Single values, System.Int32 valuesCount) => ImGui.PlotLines(label, ref values, valuesCount);
		public static void PlotLines(System.String label, ref System.Single values, System.Int32 valuesCount, System.Int32 valuesOffset) => ImGui.PlotLines(label, ref values, valuesCount, valuesOffset);
		public static void PlotLines(System.String label, ref System.Single values, System.Int32 valuesCount, System.Int32 valuesOffset, System.String overlayText) => ImGui.PlotLines(label, ref values, valuesCount, valuesOffset, overlayText);
		public static void PlotLines(System.String label, ref System.Single values, System.Int32 valuesCount, System.Int32 valuesOffset, System.String overlayText, System.Single scaleMin) => ImGui.PlotLines(label, ref values, valuesCount, valuesOffset, overlayText, scaleMin);
		public static void PlotLines(System.String label, ref System.Single values, System.Int32 valuesCount, System.Int32 valuesOffset, System.String overlayText, System.Single scaleMin, System.Single scaleMax) => ImGui.PlotLines(label, ref values, valuesCount, valuesOffset, overlayText, scaleMin, scaleMax);
		public static void PlotLines(System.String label, ref System.Single values, System.Int32 valuesCount, System.Int32 valuesOffset, System.String overlayText, System.Single scaleMin, System.Single scaleMax, System.Numerics.Vector2 graphSize) => ImGui.PlotLines(label, ref values, valuesCount, valuesOffset, overlayText, scaleMin, scaleMax, graphSize);
		public static void PlotLines(System.String label, ref System.Single values, System.Int32 valuesCount, System.Int32 valuesOffset, System.String overlayText, System.Single scaleMin, System.Single scaleMax, System.Numerics.Vector2 graphSize, System.Int32 stride) => ImGui.PlotLines(label, ref values, valuesCount, valuesOffset, overlayText, scaleMin, scaleMax, graphSize, stride);
		public static void PopAllowKeyboardFocus() => ImGui.PopAllowKeyboardFocus();
		public static void PopButtonRepeat() => ImGui.PopButtonRepeat();
		public static void PopClipRect() => ImGui.PopClipRect();
		public static void PopFont() => ImGui.PopFont();
		public static void PopID() => ImGui.PopID();
		public static void PopItemWidth() => ImGui.PopItemWidth();
		public static void PopStyleColor() => ImGui.PopStyleColor();
		public static void PopStyleColor(System.Int32 count) => ImGui.PopStyleColor(count);
		public static void PopStyleVar() => ImGui.PopStyleVar();
		public static void PopStyleVar(System.Int32 count) => ImGui.PopStyleVar(count);
		public static void PopTextWrapPos() => ImGui.PopTextWrapPos();
		public static void ProgressBar(System.Single fraction) => ImGui.ProgressBar(fraction);
		public static void ProgressBar(System.Single fraction, System.Numerics.Vector2 sizeArg) => ImGui.ProgressBar(fraction, sizeArg);
		public static void ProgressBar(System.Single fraction, System.Numerics.Vector2 sizeArg, System.String overlay) => ImGui.ProgressBar(fraction, sizeArg, overlay);
		public static void PushAllowKeyboardFocus(System.Boolean allowKeyboardFocus) => ImGui.PushAllowKeyboardFocus(allowKeyboardFocus);
		public static void PushButtonRepeat(System.Boolean repeat) => ImGui.PushButtonRepeat(repeat);
		public static void PushClipRect(System.Numerics.Vector2 clipRectMin, System.Numerics.Vector2 clipRectMax, System.Boolean intersectWithCurrentClipRect) => ImGui.PushClipRect(clipRectMin, clipRectMax, intersectWithCurrentClipRect);
		public static void PushFont(ImGuiNET.ImFontPtr font) => ImGui.PushFont(font);
		public static void PushID(System.String strId) => ImGui.PushID(strId);
		public static void PushID(System.IntPtr ptrId) => ImGui.PushID(ptrId);
		public static void PushID(System.Int32 intId) => ImGui.PushID(intId);
		public static void PushItemWidth(System.Single itemWidth) => ImGui.PushItemWidth(itemWidth);
		public static void PushStyleColor(ImGuiNET.ImGuiCol idx, System.UInt32 col) => ImGui.PushStyleColor(idx, col);
		public static void PushStyleColor(ImGuiNET.ImGuiCol idx, System.Numerics.Vector4 col) => ImGui.PushStyleColor(idx, col);
		public static void PushStyleVar(ImGuiNET.ImGuiStyleVar idx, System.Single val) => ImGui.PushStyleVar(idx, val);
		public static void PushStyleVar(ImGuiNET.ImGuiStyleVar idx, System.Numerics.Vector2 val) => ImGui.PushStyleVar(idx, val);
		public static void PushTextWrapPos() => ImGui.PushTextWrapPos();
		public static void PushTextWrapPos(System.Single wrapLocalPosX) => ImGui.PushTextWrapPos(wrapLocalPosX);
		public static System.Boolean RadioButton(System.String label, System.Boolean active) => ImGui.RadioButton(label, active);
		public static System.Boolean RadioButton(System.String label, ref System.Int32 v, System.Int32 vButton) => ImGui.RadioButton(label, ref v, vButton);
		public static void Render() => ImGui.Render();
		public static void ResetMouseDragDelta() => ImGui.ResetMouseDragDelta();
		public static void ResetMouseDragDelta(ImGuiNET.ImGuiMouseButton button) => ImGui.ResetMouseDragDelta(button);
		public static void SameLine() => ImGui.SameLine();
		public static void SameLine(System.Single offsetFromStartX) => ImGui.SameLine(offsetFromStartX);
		public static void SameLine(System.Single offsetFromStartX, System.Single spacing) => ImGui.SameLine(offsetFromStartX, spacing);
		public static System.Boolean InputDouble(System.String label, ref System.Double v) => ImGui.InputDouble(label, ref v);
		public static System.Boolean InputDouble(System.String label, ref System.Double v, System.Double step) => ImGui.InputDouble(label, ref v, step);
		public static System.Boolean InputDouble(System.String label, ref System.Double v, System.Double step, System.Double stepFast) => ImGui.InputDouble(label, ref v, step, stepFast);
		public static System.Boolean InputDouble(System.String label, ref System.Double v, System.Double step, System.Double stepFast, System.String format) => ImGui.InputDouble(label, ref v, step, stepFast, format);
		public static System.Boolean InputDouble(System.String label, ref System.Double v, System.Double step, System.Double stepFast, System.String format, ImGuiNET.ImGuiInputTextFlags flags) => ImGui.InputDouble(label, ref v, step, stepFast, format, flags);
		public static System.Boolean InputFloat(System.String label, ref System.Single v) => ImGui.InputFloat(label, ref v);
		public static System.Boolean InputFloat(System.String label, ref System.Single v, System.Single step) => ImGui.InputFloat(label, ref v, step);
		public static System.Boolean InputFloat(System.String label, ref System.Single v, System.Single step, System.Single stepFast) => ImGui.InputFloat(label, ref v, step, stepFast);
		public static System.Boolean InputFloat(System.String label, ref System.Single v, System.Single step, System.Single stepFast, System.String format) => ImGui.InputFloat(label, ref v, step, stepFast, format);
		public static System.Boolean InputFloat(System.String label, ref System.Single v, System.Single step, System.Single stepFast, System.String format, ImGuiNET.ImGuiInputTextFlags flags) => ImGui.InputFloat(label, ref v, step, stepFast, format, flags);
		public static System.Boolean InputFloat2(System.String label, ref System.Numerics.Vector2 v) => ImGui.InputFloat2(label, ref v);
		public static System.Boolean InputFloat2(System.String label, ref System.Numerics.Vector2 v, System.String format) => ImGui.InputFloat2(label, ref v, format);
		public static System.Boolean InputFloat2(System.String label, ref System.Numerics.Vector2 v, System.String format, ImGuiNET.ImGuiInputTextFlags flags) => ImGui.InputFloat2(label, ref v, format, flags);
		public static System.Boolean InputFloat3(System.String label, ref System.Numerics.Vector3 v) => ImGui.InputFloat3(label, ref v);
		public static System.Boolean InputFloat3(System.String label, ref System.Numerics.Vector3 v, System.String format) => ImGui.InputFloat3(label, ref v, format);
		public static System.Boolean InputFloat3(System.String label, ref System.Numerics.Vector3 v, System.String format, ImGuiNET.ImGuiInputTextFlags flags) => ImGui.InputFloat3(label, ref v, format, flags);
		public static System.Boolean InputFloat4(System.String label, ref System.Numerics.Vector4 v) => ImGui.InputFloat4(label, ref v);
		public static System.Boolean InputFloat4(System.String label, ref System.Numerics.Vector4 v, System.String format) => ImGui.InputFloat4(label, ref v, format);
		public static System.Boolean InputFloat4(System.String label, ref System.Numerics.Vector4 v, System.String format, ImGuiNET.ImGuiInputTextFlags flags) => ImGui.InputFloat4(label, ref v, format, flags);
		public static System.Boolean InputInt(System.String label, ref System.Int32 v) => ImGui.InputInt(label, ref v);
		public static System.Boolean InputInt(System.String label, ref System.Int32 v, System.Int32 step) => ImGui.InputInt(label, ref v, step);
		public static System.Boolean InputInt(System.String label, ref System.Int32 v, System.Int32 step, System.Int32 stepFast) => ImGui.InputInt(label, ref v, step, stepFast);
		public static System.Boolean InputInt(System.String label, ref System.Int32 v, System.Int32 step, System.Int32 stepFast, ImGuiNET.ImGuiInputTextFlags flags) => ImGui.InputInt(label, ref v, step, stepFast, flags);
		public static System.Boolean InputInt2(System.String label, ref System.Int32 v) => ImGui.InputInt2(label, ref v);
		public static System.Boolean InputInt2(System.String label, ref System.Int32 v, ImGuiNET.ImGuiInputTextFlags flags) => ImGui.InputInt2(label, ref v, flags);
		public static System.Boolean InputInt3(System.String label, ref System.Int32 v) => ImGui.InputInt3(label, ref v);
		public static System.Boolean InputInt3(System.String label, ref System.Int32 v, ImGuiNET.ImGuiInputTextFlags flags) => ImGui.InputInt3(label, ref v, flags);
		public static System.Boolean InputInt4(System.String label, ref System.Int32 v) => ImGui.InputInt4(label, ref v);
		public static System.Boolean InputInt4(System.String label, ref System.Int32 v, ImGuiNET.ImGuiInputTextFlags flags) => ImGui.InputInt4(label, ref v, flags);
		public static System.Boolean InputScalar(System.String label, ImGuiNET.ImGuiDataType dataType, System.IntPtr pData) => ImGui.InputScalar(label, dataType, pData);
		public static System.Boolean InputScalar(System.String label, ImGuiNET.ImGuiDataType dataType, System.IntPtr pData, System.IntPtr pStep) => ImGui.InputScalar(label, dataType, pData, pStep);
		public static System.Boolean InputScalar(System.String label, ImGuiNET.ImGuiDataType dataType, System.IntPtr pData, System.IntPtr pStep, System.IntPtr pStepFast) => ImGui.InputScalar(label, dataType, pData, pStep, pStepFast);
		public static System.Boolean InputScalar(System.String label, ImGuiNET.ImGuiDataType dataType, System.IntPtr pData, System.IntPtr pStep, System.IntPtr pStepFast, System.String format) => ImGui.InputScalar(label, dataType, pData, pStep, pStepFast, format);
		public static System.Boolean InputScalar(System.String label, ImGuiNET.ImGuiDataType dataType, System.IntPtr pData, System.IntPtr pStep, System.IntPtr pStepFast, System.String format, ImGuiNET.ImGuiInputTextFlags flags) => ImGui.InputScalar(label, dataType, pData, pStep, pStepFast, format, flags);
		public static System.Boolean InputScalarN(System.String label, ImGuiNET.ImGuiDataType dataType, System.IntPtr pData, System.Int32 components) => ImGui.InputScalarN(label, dataType, pData, components);
		public static System.Boolean InputScalarN(System.String label, ImGuiNET.ImGuiDataType dataType, System.IntPtr pData, System.Int32 components, System.IntPtr pStep) => ImGui.InputScalarN(label, dataType, pData, components, pStep);
		public static System.Boolean InputScalarN(System.String label, ImGuiNET.ImGuiDataType dataType, System.IntPtr pData, System.Int32 components, System.IntPtr pStep, System.IntPtr pStepFast) => ImGui.InputScalarN(label, dataType, pData, components, pStep, pStepFast);
		public static System.Boolean InputScalarN(System.String label, ImGuiNET.ImGuiDataType dataType, System.IntPtr pData, System.Int32 components, System.IntPtr pStep, System.IntPtr pStepFast, System.String format) => ImGui.InputScalarN(label, dataType, pData, components, pStep, pStepFast, format);
		public static System.Boolean InputScalarN(System.String label, ImGuiNET.ImGuiDataType dataType, System.IntPtr pData, System.Int32 components, System.IntPtr pStep, System.IntPtr pStepFast, System.String format, ImGuiNET.ImGuiInputTextFlags flags) => ImGui.InputScalarN(label, dataType, pData, components, pStep, pStepFast, format, flags);
		public static System.Boolean InputTextWithHint(System.String label, System.String hint, System.String buf, System.UInt32 bufSize) => ImGui.InputTextWithHint(label, hint, buf, bufSize);
		public static System.Boolean InputTextWithHint(System.String label, System.String hint, System.String buf, System.UInt32 bufSize, ImGuiNET.ImGuiInputTextFlags flags) => ImGui.InputTextWithHint(label, hint, buf, bufSize, flags);
		public static System.Boolean InputTextWithHint(System.String label, System.String hint, System.String buf, System.UInt32 bufSize, ImGuiNET.ImGuiInputTextFlags flags, ImGuiNET.ImGuiInputTextCallback callback) => ImGui.InputTextWithHint(label, hint, buf, bufSize, flags, callback);
		public static System.Boolean InputTextWithHint(System.String label, System.String hint, System.String buf, System.UInt32 bufSize, ImGuiNET.ImGuiInputTextFlags flags, ImGuiNET.ImGuiInputTextCallback callback, System.IntPtr userData) => ImGui.InputTextWithHint(label, hint, buf, bufSize, flags, callback, userData);
		public static System.Boolean InvisibleButton(System.String strId, System.Numerics.Vector2 size) => ImGui.InvisibleButton(strId, size);
		public static System.Boolean IsAnyItemActive() => ImGui.IsAnyItemActive();
		public static System.Boolean IsAnyItemFocused() => ImGui.IsAnyItemFocused();
		public static System.Boolean IsAnyItemHovered() => ImGui.IsAnyItemHovered();
		public static System.Boolean IsAnyMouseDown() => ImGui.IsAnyMouseDown();
		public static System.Boolean IsItemActivated() => ImGui.IsItemActivated();
		public static System.Boolean IsItemActive() => ImGui.IsItemActive();
		public static System.Boolean IsItemClicked() => ImGui.IsItemClicked();
		public static System.Boolean IsItemClicked(ImGuiNET.ImGuiMouseButton mouseButton) => ImGui.IsItemClicked(mouseButton);
		public static System.Boolean IsItemDeactivated() => ImGui.IsItemDeactivated();
		public static System.Boolean IsItemDeactivatedAfterEdit() => ImGui.IsItemDeactivatedAfterEdit();
		public static System.Boolean IsItemEdited() => ImGui.IsItemEdited();
		public static System.Boolean IsItemFocused() => ImGui.IsItemFocused();
		public static System.Boolean IsItemHovered() => ImGui.IsItemHovered();
		public static System.Boolean IsItemHovered(ImGuiNET.ImGuiHoveredFlags flags) => ImGui.IsItemHovered(flags);
		public static System.Boolean IsItemToggledOpen() => ImGui.IsItemToggledOpen();
		public static System.Boolean IsItemVisible() => ImGui.IsItemVisible();
		public static System.Boolean IsKeyDown(System.Int32 userKeyIndex) => ImGui.IsKeyDown(userKeyIndex);
		public static System.Boolean IsKeyPressed(System.Int32 userKeyIndex) => ImGui.IsKeyPressed(userKeyIndex);
		public static System.Boolean IsKeyPressed(System.Int32 userKeyIndex, System.Boolean repeat) => ImGui.IsKeyPressed(userKeyIndex, repeat);
		public static System.Boolean IsKeyReleased(System.Int32 userKeyIndex) => ImGui.IsKeyReleased(userKeyIndex);
		public static System.Boolean IsMouseClicked(ImGuiNET.ImGuiMouseButton button) => ImGui.IsMouseClicked(button);
		public static System.Boolean IsMouseClicked(ImGuiNET.ImGuiMouseButton button, System.Boolean repeat) => ImGui.IsMouseClicked(button, repeat);
		public static System.Boolean IsMouseDoubleClicked(ImGuiNET.ImGuiMouseButton button) => ImGui.IsMouseDoubleClicked(button);
		public static System.Boolean IsMouseDown(ImGuiNET.ImGuiMouseButton button) => ImGui.IsMouseDown(button);
		public static System.Boolean IsMouseDragging(ImGuiNET.ImGuiMouseButton button) => ImGui.IsMouseDragging(button);
		public static System.Boolean IsMouseDragging(ImGuiNET.ImGuiMouseButton button, System.Single lockThreshold) => ImGui.IsMouseDragging(button, lockThreshold);
		public static System.Boolean IsMouseHoveringRect(System.Numerics.Vector2 rMin, System.Numerics.Vector2 rMax) => ImGui.IsMouseHoveringRect(rMin, rMax);
		public static System.Boolean IsMouseHoveringRect(System.Numerics.Vector2 rMin, System.Numerics.Vector2 rMax, System.Boolean clip) => ImGui.IsMouseHoveringRect(rMin, rMax, clip);
		public static System.Boolean IsMousePosValid() => ImGui.IsMousePosValid();
		public static System.Boolean IsMousePosValid(ref System.Numerics.Vector2 mousePos) => ImGui.IsMousePosValid(ref mousePos);
		public static System.Boolean IsMouseReleased(ImGuiNET.ImGuiMouseButton button) => ImGui.IsMouseReleased(button);
		public static System.Boolean IsPopupOpen(System.String strId) => ImGui.IsPopupOpen(strId);
		public static System.Boolean IsRectVisible(System.Numerics.Vector2 size) => ImGui.IsRectVisible(size);
		public static System.Boolean IsRectVisible(System.Numerics.Vector2 rectMin, System.Numerics.Vector2 rectMax) => ImGui.IsRectVisible(rectMin, rectMax);
		public static System.Boolean IsWindowAppearing() => ImGui.IsWindowAppearing();
		public static System.Boolean IsWindowCollapsed() => ImGui.IsWindowCollapsed();
		public static System.Boolean IsWindowFocused() => ImGui.IsWindowFocused();
		public static System.Boolean IsWindowFocused(ImGuiNET.ImGuiFocusedFlags flags) => ImGui.IsWindowFocused(flags);
		public static System.Boolean IsWindowHovered() => ImGui.IsWindowHovered();
		public static System.Boolean IsWindowHovered(ImGuiNET.ImGuiHoveredFlags flags) => ImGui.IsWindowHovered(flags);
		public static void LabelText(System.String label, System.String fmt) => ImGui.LabelText(label, fmt);
		public static void EndMainMenuBar() => ImGui.EndMainMenuBar();
		public static void EndMenu() => ImGui.EndMenu();
		public static void EndMenuBar() => ImGui.EndMenuBar();
		public static void EndPopup() => ImGui.EndPopup();
		public static void EndTabBar() => ImGui.EndTabBar();
		public static void EndTabItem() => ImGui.EndTabItem();
		public static void EndTooltip() => ImGui.EndTooltip();
		public static ImGuiNET.ImDrawListPtr GetBackgroundDrawList() => ImGui.GetBackgroundDrawList();
		public static System.String GetClipboardText() => ImGui.GetClipboardText();
		public static System.UInt32 GetColorU32(ImGuiNET.ImGuiCol idx) => ImGui.GetColorU32(idx);
		public static System.UInt32 GetColorU32(ImGuiNET.ImGuiCol idx, System.Single alphaMul) => ImGui.GetColorU32(idx, alphaMul);
		public static System.UInt32 GetColorU32(System.Numerics.Vector4 col) => ImGui.GetColorU32(col);
		public static System.UInt32 GetColorU32(System.UInt32 col) => ImGui.GetColorU32(col);
		public static System.Int32 GetColumnIndex() => ImGui.GetColumnIndex();
		public static System.Single GetColumnOffset() => ImGui.GetColumnOffset();
		public static System.Single GetColumnOffset(System.Int32 columnIndex) => ImGui.GetColumnOffset(columnIndex);
		public static System.Int32 GetColumnsCount() => ImGui.GetColumnsCount();
		public static System.Single GetColumnWidth() => ImGui.GetColumnWidth();
		public static System.Single GetColumnWidth(System.Int32 columnIndex) => ImGui.GetColumnWidth(columnIndex);
		public static System.Numerics.Vector2 GetContentRegionAvail() => ImGui.GetContentRegionAvail();
		public static System.Numerics.Vector2 GetContentRegionMax() => ImGui.GetContentRegionMax();
		public static System.IntPtr GetCurrentContext() => ImGui.GetCurrentContext();
		public static System.Numerics.Vector2 GetCursorPos() => ImGui.GetCursorPos();
		public static System.Single GetCursorPosX() => ImGui.GetCursorPosX();
		public static System.Single GetCursorPosY() => ImGui.GetCursorPosY();
		public static System.Numerics.Vector2 GetCursorScreenPos() => ImGui.GetCursorScreenPos();
		public static System.Numerics.Vector2 GetCursorStartPos() => ImGui.GetCursorStartPos();
		public static ImGuiNET.ImGuiPayloadPtr GetDragDropPayload() => ImGui.GetDragDropPayload();
		public static ImGuiNET.ImDrawDataPtr GetDrawData() => ImGui.GetDrawData();
		public static System.IntPtr GetDrawListSharedData() => ImGui.GetDrawListSharedData();
		public static ImGuiNET.ImFontPtr GetFont() => ImGui.GetFont();
		public static System.Single GetFontSize() => ImGui.GetFontSize();
		public static System.Numerics.Vector2 GetFontTexUvWhitePixel() => ImGui.GetFontTexUvWhitePixel();
		public static ImGuiNET.ImDrawListPtr GetForegroundDrawList() => ImGui.GetForegroundDrawList();
		public static System.Int32 GetFrameCount() => ImGui.GetFrameCount();
		public static System.Single GetFrameHeight() => ImGui.GetFrameHeight();
		public static System.Single GetFrameHeightWithSpacing() => ImGui.GetFrameHeightWithSpacing();
		public static System.UInt32 GetID(System.String strId) => ImGui.GetID(strId);
		public static System.UInt32 GetID(System.IntPtr ptrId) => ImGui.GetID(ptrId);
		public static ImGuiNET.ImGuiIOPtr GetIO() => ImGui.GetIO();
		public static System.Numerics.Vector2 GetItemRectMax() => ImGui.GetItemRectMax();
		public static System.Numerics.Vector2 GetItemRectMin() => ImGui.GetItemRectMin();
		public static System.Numerics.Vector2 GetItemRectSize() => ImGui.GetItemRectSize();
		public static System.Int32 GetKeyIndex(ImGuiNET.ImGuiKey imguiKey) => ImGui.GetKeyIndex(imguiKey);
		public static System.Int32 GetKeyPressedAmount(System.Int32 keyIndex, System.Single repeatDelay, System.Single rate) => ImGui.GetKeyPressedAmount(keyIndex, repeatDelay, rate);
		public static ImGuiNET.ImGuiMouseCursor GetMouseCursor() => ImGui.GetMouseCursor();
		public static System.Numerics.Vector2 GetMouseDragDelta() => ImGui.GetMouseDragDelta();
		public static System.Numerics.Vector2 GetMouseDragDelta(ImGuiNET.ImGuiMouseButton button) => ImGui.GetMouseDragDelta(button);
		public static System.Numerics.Vector2 GetMouseDragDelta(ImGuiNET.ImGuiMouseButton button, System.Single lockThreshold) => ImGui.GetMouseDragDelta(button, lockThreshold);
		public static System.Numerics.Vector2 GetMousePos() => ImGui.GetMousePos();
		public static System.Numerics.Vector2 GetMousePosOnOpeningCurrentPopup() => ImGui.GetMousePosOnOpeningCurrentPopup();
		public static System.Single GetScrollMaxX() => ImGui.GetScrollMaxX();
		public static System.Single GetScrollMaxY() => ImGui.GetScrollMaxY();
		public static System.Single GetScrollX() => ImGui.GetScrollX();
		public static System.Single GetScrollY() => ImGui.GetScrollY();
		public static ImGuiNET.ImGuiStoragePtr GetStateStorage() => ImGui.GetStateStorage();
		public static ImGuiNET.ImGuiStylePtr GetStyle() => ImGui.GetStyle();
		public static System.String GetStyleColorName(ImGuiNET.ImGuiCol idx) => ImGui.GetStyleColorName(idx);
		public static System.Single GetTextLineHeight() => ImGui.GetTextLineHeight();
		public static System.Single GetTextLineHeightWithSpacing() => ImGui.GetTextLineHeightWithSpacing();
		public static System.Double GetTime() => ImGui.GetTime();
		public static System.Single GetTreeNodeToLabelSpacing() => ImGui.GetTreeNodeToLabelSpacing();
		public static System.String GetVersion() => ImGui.GetVersion();
		public static System.Numerics.Vector2 GetWindowContentRegionMax() => ImGui.GetWindowContentRegionMax();
		public static System.Numerics.Vector2 GetWindowContentRegionMin() => ImGui.GetWindowContentRegionMin();
		public static System.Single GetWindowContentRegionWidth() => ImGui.GetWindowContentRegionWidth();
		public static ImGuiNET.ImDrawListPtr GetWindowDrawList() => ImGui.GetWindowDrawList();
		public static System.Single GetWindowHeight() => ImGui.GetWindowHeight();
		public static System.Numerics.Vector2 GetWindowPos() => ImGui.GetWindowPos();
		public static System.Numerics.Vector2 GetWindowSize() => ImGui.GetWindowSize();
		public static System.Single GetWindowWidth() => ImGui.GetWindowWidth();
		public static void Image(System.IntPtr userTextureId, System.Numerics.Vector2 size) => ImGui.Image(userTextureId, size);
		public static void Image(System.IntPtr userTextureId, System.Numerics.Vector2 size, System.Numerics.Vector2 uv0) => ImGui.Image(userTextureId, size, uv0);
		public static void Image(System.IntPtr userTextureId, System.Numerics.Vector2 size, System.Numerics.Vector2 uv0, System.Numerics.Vector2 uv1) => ImGui.Image(userTextureId, size, uv0, uv1);
		public static void Image(System.IntPtr userTextureId, System.Numerics.Vector2 size, System.Numerics.Vector2 uv0, System.Numerics.Vector2 uv1, System.Numerics.Vector4 tintCol) => ImGui.Image(userTextureId, size, uv0, uv1, tintCol);
		public static void Image(System.IntPtr userTextureId, System.Numerics.Vector2 size, System.Numerics.Vector2 uv0, System.Numerics.Vector2 uv1, System.Numerics.Vector4 tintCol, System.Numerics.Vector4 borderCol) => ImGui.Image(userTextureId, size, uv0, uv1, tintCol, borderCol);
		public static System.Boolean ImageButton(System.IntPtr userTextureId, System.Numerics.Vector2 size) => ImGui.ImageButton(userTextureId, size);
		public static System.Boolean ImageButton(System.IntPtr userTextureId, System.Numerics.Vector2 size, System.Numerics.Vector2 uv0) => ImGui.ImageButton(userTextureId, size, uv0);
		public static System.Boolean ImageButton(System.IntPtr userTextureId, System.Numerics.Vector2 size, System.Numerics.Vector2 uv0, System.Numerics.Vector2 uv1) => ImGui.ImageButton(userTextureId, size, uv0, uv1);
		public static System.Boolean ImageButton(System.IntPtr userTextureId, System.Numerics.Vector2 size, System.Numerics.Vector2 uv0, System.Numerics.Vector2 uv1, System.Int32 framePadding) => ImGui.ImageButton(userTextureId, size, uv0, uv1, framePadding);
		public static System.Boolean ImageButton(System.IntPtr userTextureId, System.Numerics.Vector2 size, System.Numerics.Vector2 uv0, System.Numerics.Vector2 uv1, System.Int32 framePadding, System.Numerics.Vector4 bgCol) => ImGui.ImageButton(userTextureId, size, uv0, uv1, framePadding, bgCol);
		public static System.Boolean ImageButton(System.IntPtr userTextureId, System.Numerics.Vector2 size, System.Numerics.Vector2 uv0, System.Numerics.Vector2 uv1, System.Int32 framePadding, System.Numerics.Vector4 bgCol, System.Numerics.Vector4 tintCol) => ImGui.ImageButton(userTextureId, size, uv0, uv1, framePadding, bgCol, tintCol);
		public static void Indent() => ImGui.Indent();
		public static void Indent(System.Single indentW) => ImGui.Indent(indentW);
		public static System.Boolean Combo(System.String label, ref System.Int32 currentItem, System.String[] items, System.Int32 itemsCount) => ImGui.Combo(label, ref currentItem, items, itemsCount);
		public static System.Boolean Combo(System.String label, ref System.Int32 currentItem, System.String[] items, System.Int32 itemsCount, System.Int32 popupMaxHeightInItems) => ImGui.Combo(label, ref currentItem, items, itemsCount, popupMaxHeightInItems);
		public static System.Boolean Combo(System.String label, ref System.Int32 currentItem, System.String itemsSeparatedByZeros) => ImGui.Combo(label, ref currentItem, itemsSeparatedByZeros);
		public static System.Boolean Combo(System.String label, ref System.Int32 currentItem, System.String itemsSeparatedByZeros, System.Int32 popupMaxHeightInItems) => ImGui.Combo(label, ref currentItem, itemsSeparatedByZeros, popupMaxHeightInItems);
		public static System.IntPtr CreateContext() => ImGui.CreateContext();
		public static System.IntPtr CreateContext(ImGuiNET.ImFontAtlasPtr sharedFontAtlas) => ImGui.CreateContext(sharedFontAtlas);
		public static System.Boolean DebugCheckVersionAndDataLayout(System.String versionStr, System.UInt32 szIo, System.UInt32 szStyle, System.UInt32 szVec2, System.UInt32 szVec4, System.UInt32 szDrawvert, System.UInt32 szDrawidx) => ImGui.DebugCheckVersionAndDataLayout(versionStr, szIo, szStyle, szVec2, szVec4, szDrawvert, szDrawidx);
		public static void DestroyContext() => ImGui.DestroyContext();
		public static void DestroyContext(System.IntPtr ctx) => ImGui.DestroyContext(ctx);
		public static System.Boolean DragFloat(System.String label, ref System.Single v) => ImGui.DragFloat(label, ref v);
		public static System.Boolean DragFloat(System.String label, ref System.Single v, System.Single vSpeed) => ImGui.DragFloat(label, ref v, vSpeed);
		public static System.Boolean DragFloat(System.String label, ref System.Single v, System.Single vSpeed, System.Single vMin) => ImGui.DragFloat(label, ref v, vSpeed, vMin);
		public static System.Boolean DragFloat(System.String label, ref System.Single v, System.Single vSpeed, System.Single vMin, System.Single vMax) => ImGui.DragFloat(label, ref v, vSpeed, vMin, vMax);
		public static System.Boolean DragFloat(System.String label, ref System.Single v, System.Single vSpeed, System.Single vMin, System.Single vMax, System.String format) => ImGui.DragFloat(label, ref v, vSpeed, vMin, vMax, format);
		public static System.Boolean DragFloat(System.String label, ref System.Single v, System.Single vSpeed, System.Single vMin, System.Single vMax, System.String format, System.Single power) => ImGui.DragFloat(label, ref v, vSpeed, vMin, vMax, format, power);
		public static System.Boolean DragFloat2(System.String label, ref System.Numerics.Vector2 v) => ImGui.DragFloat2(label, ref v);
		public static System.Boolean DragFloat2(System.String label, ref System.Numerics.Vector2 v, System.Single vSpeed) => ImGui.DragFloat2(label, ref v, vSpeed);
		public static System.Boolean DragFloat2(System.String label, ref System.Numerics.Vector2 v, System.Single vSpeed, System.Single vMin) => ImGui.DragFloat2(label, ref v, vSpeed, vMin);
		public static System.Boolean DragFloat2(System.String label, ref System.Numerics.Vector2 v, System.Single vSpeed, System.Single vMin, System.Single vMax) => ImGui.DragFloat2(label, ref v, vSpeed, vMin, vMax);
		public static System.Boolean DragFloat2(System.String label, ref System.Numerics.Vector2 v, System.Single vSpeed, System.Single vMin, System.Single vMax, System.String format) => ImGui.DragFloat2(label, ref v, vSpeed, vMin, vMax, format);
		public static System.Boolean DragFloat2(System.String label, ref System.Numerics.Vector2 v, System.Single vSpeed, System.Single vMin, System.Single vMax, System.String format, System.Single power) => ImGui.DragFloat2(label, ref v, vSpeed, vMin, vMax, format, power);
		public static System.Boolean DragFloat3(System.String label, ref System.Numerics.Vector3 v) => ImGui.DragFloat3(label, ref v);
		public static System.Boolean DragFloat3(System.String label, ref System.Numerics.Vector3 v, System.Single vSpeed) => ImGui.DragFloat3(label, ref v, vSpeed);
		public static System.Boolean DragFloat3(System.String label, ref System.Numerics.Vector3 v, System.Single vSpeed, System.Single vMin) => ImGui.DragFloat3(label, ref v, vSpeed, vMin);
		public static System.Boolean DragFloat3(System.String label, ref System.Numerics.Vector3 v, System.Single vSpeed, System.Single vMin, System.Single vMax) => ImGui.DragFloat3(label, ref v, vSpeed, vMin, vMax);
		public static System.Boolean DragFloat3(System.String label, ref System.Numerics.Vector3 v, System.Single vSpeed, System.Single vMin, System.Single vMax, System.String format) => ImGui.DragFloat3(label, ref v, vSpeed, vMin, vMax, format);
		public static System.Boolean DragFloat3(System.String label, ref System.Numerics.Vector3 v, System.Single vSpeed, System.Single vMin, System.Single vMax, System.String format, System.Single power) => ImGui.DragFloat3(label, ref v, vSpeed, vMin, vMax, format, power);
		public static System.Boolean DragFloat4(System.String label, ref System.Numerics.Vector4 v) => ImGui.DragFloat4(label, ref v);
		public static System.Boolean DragFloat4(System.String label, ref System.Numerics.Vector4 v, System.Single vSpeed) => ImGui.DragFloat4(label, ref v, vSpeed);
		public static System.Boolean DragFloat4(System.String label, ref System.Numerics.Vector4 v, System.Single vSpeed, System.Single vMin) => ImGui.DragFloat4(label, ref v, vSpeed, vMin);
		public static System.Boolean DragFloat4(System.String label, ref System.Numerics.Vector4 v, System.Single vSpeed, System.Single vMin, System.Single vMax) => ImGui.DragFloat4(label, ref v, vSpeed, vMin, vMax);
		public static System.Boolean DragFloat4(System.String label, ref System.Numerics.Vector4 v, System.Single vSpeed, System.Single vMin, System.Single vMax, System.String format) => ImGui.DragFloat4(label, ref v, vSpeed, vMin, vMax, format);
		public static System.Boolean DragFloat4(System.String label, ref System.Numerics.Vector4 v, System.Single vSpeed, System.Single vMin, System.Single vMax, System.String format, System.Single power) => ImGui.DragFloat4(label, ref v, vSpeed, vMin, vMax, format, power);
		public static System.Boolean DragFloatRange2(System.String label, ref System.Single vCurrentMin, ref System.Single vCurrentMax) => ImGui.DragFloatRange2(label, ref vCurrentMin, ref vCurrentMax);
		public static System.Boolean DragFloatRange2(System.String label, ref System.Single vCurrentMin, ref System.Single vCurrentMax, System.Single vSpeed) => ImGui.DragFloatRange2(label, ref vCurrentMin, ref vCurrentMax, vSpeed);
		public static System.Boolean DragFloatRange2(System.String label, ref System.Single vCurrentMin, ref System.Single vCurrentMax, System.Single vSpeed, System.Single vMin) => ImGui.DragFloatRange2(label, ref vCurrentMin, ref vCurrentMax, vSpeed, vMin);
		public static System.Boolean DragFloatRange2(System.String label, ref System.Single vCurrentMin, ref System.Single vCurrentMax, System.Single vSpeed, System.Single vMin, System.Single vMax) => ImGui.DragFloatRange2(label, ref vCurrentMin, ref vCurrentMax, vSpeed, vMin, vMax);
		public static System.Boolean DragFloatRange2(System.String label, ref System.Single vCurrentMin, ref System.Single vCurrentMax, System.Single vSpeed, System.Single vMin, System.Single vMax, System.String format) => ImGui.DragFloatRange2(label, ref vCurrentMin, ref vCurrentMax, vSpeed, vMin, vMax, format);
		public static System.Boolean DragFloatRange2(System.String label, ref System.Single vCurrentMin, ref System.Single vCurrentMax, System.Single vSpeed, System.Single vMin, System.Single vMax, System.String format, System.String formatMax) => ImGui.DragFloatRange2(label, ref vCurrentMin, ref vCurrentMax, vSpeed, vMin, vMax, format, formatMax);
		public static System.Boolean DragFloatRange2(System.String label, ref System.Single vCurrentMin, ref System.Single vCurrentMax, System.Single vSpeed, System.Single vMin, System.Single vMax, System.String format, System.String formatMax, System.Single power) => ImGui.DragFloatRange2(label, ref vCurrentMin, ref vCurrentMax, vSpeed, vMin, vMax, format, formatMax, power);
		public static System.Boolean DragInt(System.String label, ref System.Int32 v) => ImGui.DragInt(label, ref v);
		public static System.Boolean DragInt(System.String label, ref System.Int32 v, System.Single vSpeed) => ImGui.DragInt(label, ref v, vSpeed);
		public static System.Boolean DragInt(System.String label, ref System.Int32 v, System.Single vSpeed, System.Int32 vMin) => ImGui.DragInt(label, ref v, vSpeed, vMin);
		public static System.Boolean DragInt(System.String label, ref System.Int32 v, System.Single vSpeed, System.Int32 vMin, System.Int32 vMax) => ImGui.DragInt(label, ref v, vSpeed, vMin, vMax);
		public static System.Boolean DragInt(System.String label, ref System.Int32 v, System.Single vSpeed, System.Int32 vMin, System.Int32 vMax, System.String format) => ImGui.DragInt(label, ref v, vSpeed, vMin, vMax, format);
		public static System.Boolean DragInt2(System.String label, ref System.Int32 v) => ImGui.DragInt2(label, ref v);
		public static System.Boolean DragInt2(System.String label, ref System.Int32 v, System.Single vSpeed) => ImGui.DragInt2(label, ref v, vSpeed);
		public static System.Boolean DragInt2(System.String label, ref System.Int32 v, System.Single vSpeed, System.Int32 vMin) => ImGui.DragInt2(label, ref v, vSpeed, vMin);
		public static System.Boolean DragInt2(System.String label, ref System.Int32 v, System.Single vSpeed, System.Int32 vMin, System.Int32 vMax) => ImGui.DragInt2(label, ref v, vSpeed, vMin, vMax);
		public static System.Boolean DragInt2(System.String label, ref System.Int32 v, System.Single vSpeed, System.Int32 vMin, System.Int32 vMax, System.String format) => ImGui.DragInt2(label, ref v, vSpeed, vMin, vMax, format);
		public static System.Boolean DragInt3(System.String label, ref System.Int32 v) => ImGui.DragInt3(label, ref v);
		public static System.Boolean DragInt3(System.String label, ref System.Int32 v, System.Single vSpeed) => ImGui.DragInt3(label, ref v, vSpeed);
		public static System.Boolean DragInt3(System.String label, ref System.Int32 v, System.Single vSpeed, System.Int32 vMin) => ImGui.DragInt3(label, ref v, vSpeed, vMin);
		public static System.Boolean DragInt3(System.String label, ref System.Int32 v, System.Single vSpeed, System.Int32 vMin, System.Int32 vMax) => ImGui.DragInt3(label, ref v, vSpeed, vMin, vMax);
		public static System.Boolean DragInt3(System.String label, ref System.Int32 v, System.Single vSpeed, System.Int32 vMin, System.Int32 vMax, System.String format) => ImGui.DragInt3(label, ref v, vSpeed, vMin, vMax, format);
		public static System.Boolean DragInt4(System.String label, ref System.Int32 v) => ImGui.DragInt4(label, ref v);
		public static System.Boolean DragInt4(System.String label, ref System.Int32 v, System.Single vSpeed) => ImGui.DragInt4(label, ref v, vSpeed);
		public static System.Boolean DragInt4(System.String label, ref System.Int32 v, System.Single vSpeed, System.Int32 vMin) => ImGui.DragInt4(label, ref v, vSpeed, vMin);
		public static System.Boolean DragInt4(System.String label, ref System.Int32 v, System.Single vSpeed, System.Int32 vMin, System.Int32 vMax) => ImGui.DragInt4(label, ref v, vSpeed, vMin, vMax);
		public static System.Boolean DragInt4(System.String label, ref System.Int32 v, System.Single vSpeed, System.Int32 vMin, System.Int32 vMax, System.String format) => ImGui.DragInt4(label, ref v, vSpeed, vMin, vMax, format);
		public static System.Boolean DragIntRange2(System.String label, ref System.Int32 vCurrentMin, ref System.Int32 vCurrentMax) => ImGui.DragIntRange2(label, ref vCurrentMin, ref vCurrentMax);
		public static System.Boolean DragIntRange2(System.String label, ref System.Int32 vCurrentMin, ref System.Int32 vCurrentMax, System.Single vSpeed) => ImGui.DragIntRange2(label, ref vCurrentMin, ref vCurrentMax, vSpeed);
		public static System.Boolean DragIntRange2(System.String label, ref System.Int32 vCurrentMin, ref System.Int32 vCurrentMax, System.Single vSpeed, System.Int32 vMin) => ImGui.DragIntRange2(label, ref vCurrentMin, ref vCurrentMax, vSpeed, vMin);
		public static System.Boolean DragIntRange2(System.String label, ref System.Int32 vCurrentMin, ref System.Int32 vCurrentMax, System.Single vSpeed, System.Int32 vMin, System.Int32 vMax) => ImGui.DragIntRange2(label, ref vCurrentMin, ref vCurrentMax, vSpeed, vMin, vMax);
		public static System.Boolean DragIntRange2(System.String label, ref System.Int32 vCurrentMin, ref System.Int32 vCurrentMax, System.Single vSpeed, System.Int32 vMin, System.Int32 vMax, System.String format) => ImGui.DragIntRange2(label, ref vCurrentMin, ref vCurrentMax, vSpeed, vMin, vMax, format);
		public static System.Boolean DragIntRange2(System.String label, ref System.Int32 vCurrentMin, ref System.Int32 vCurrentMax, System.Single vSpeed, System.Int32 vMin, System.Int32 vMax, System.String format, System.String formatMax) => ImGui.DragIntRange2(label, ref vCurrentMin, ref vCurrentMax, vSpeed, vMin, vMax, format, formatMax);
		public static System.Boolean DragScalar(System.String label, ImGuiNET.ImGuiDataType dataType, System.IntPtr pData, System.Single vSpeed) => ImGui.DragScalar(label, dataType, pData, vSpeed);
		public static System.Boolean DragScalar(System.String label, ImGuiNET.ImGuiDataType dataType, System.IntPtr pData, System.Single vSpeed, System.IntPtr pMin) => ImGui.DragScalar(label, dataType, pData, vSpeed, pMin);
		public static System.Boolean DragScalar(System.String label, ImGuiNET.ImGuiDataType dataType, System.IntPtr pData, System.Single vSpeed, System.IntPtr pMin, System.IntPtr pMax) => ImGui.DragScalar(label, dataType, pData, vSpeed, pMin, pMax);
		public static System.Boolean DragScalar(System.String label, ImGuiNET.ImGuiDataType dataType, System.IntPtr pData, System.Single vSpeed, System.IntPtr pMin, System.IntPtr pMax, System.String format) => ImGui.DragScalar(label, dataType, pData, vSpeed, pMin, pMax, format);
		public static System.Boolean DragScalar(System.String label, ImGuiNET.ImGuiDataType dataType, System.IntPtr pData, System.Single vSpeed, System.IntPtr pMin, System.IntPtr pMax, System.String format, System.Single power) => ImGui.DragScalar(label, dataType, pData, vSpeed, pMin, pMax, format, power);
		public static System.Boolean DragScalarN(System.String label, ImGuiNET.ImGuiDataType dataType, System.IntPtr pData, System.Int32 components, System.Single vSpeed) => ImGui.DragScalarN(label, dataType, pData, components, vSpeed);
		public static System.Boolean DragScalarN(System.String label, ImGuiNET.ImGuiDataType dataType, System.IntPtr pData, System.Int32 components, System.Single vSpeed, System.IntPtr pMin) => ImGui.DragScalarN(label, dataType, pData, components, vSpeed, pMin);
		public static System.Boolean DragScalarN(System.String label, ImGuiNET.ImGuiDataType dataType, System.IntPtr pData, System.Int32 components, System.Single vSpeed, System.IntPtr pMin, System.IntPtr pMax) => ImGui.DragScalarN(label, dataType, pData, components, vSpeed, pMin, pMax);
		public static System.Boolean DragScalarN(System.String label, ImGuiNET.ImGuiDataType dataType, System.IntPtr pData, System.Int32 components, System.Single vSpeed, System.IntPtr pMin, System.IntPtr pMax, System.String format) => ImGui.DragScalarN(label, dataType, pData, components, vSpeed, pMin, pMax, format);
		public static System.Boolean DragScalarN(System.String label, ImGuiNET.ImGuiDataType dataType, System.IntPtr pData, System.Int32 components, System.Single vSpeed, System.IntPtr pMin, System.IntPtr pMax, System.String format, System.Single power) => ImGui.DragScalarN(label, dataType, pData, components, vSpeed, pMin, pMax, format, power);
		public static void Dummy(System.Numerics.Vector2 size) => ImGui.Dummy(size);
		public static void End() => ImGui.End();
		public static void EndChild() => ImGui.EndChild();
		public static void EndChildFrame() => ImGui.EndChildFrame();
		public static void EndCombo() => ImGui.EndCombo();
		public static void EndDragDropSource() => ImGui.EndDragDropSource();
		public static void EndDragDropTarget() => ImGui.EndDragDropTarget();
		public static void EndFrame() => ImGui.EndFrame();
		public static void EndGroup() => ImGui.EndGroup();
		public static ImGuiNET.ImGuiPayloadPtr AcceptDragDropPayload(System.String type) => ImGui.AcceptDragDropPayload(type);
		public static ImGuiNET.ImGuiPayloadPtr AcceptDragDropPayload(System.String type, ImGuiNET.ImGuiDragDropFlags flags) => ImGui.AcceptDragDropPayload(type, flags);
		public static void AlignTextToFramePadding() => ImGui.AlignTextToFramePadding();
		public static System.Boolean ArrowButton(System.String strId, ImGuiNET.ImGuiDir dir) => ImGui.ArrowButton(strId, dir);
		public static System.Boolean Begin(System.String name) => ImGui.Begin(name);
		public static System.Boolean Begin(System.String name, ref System.Boolean pOpen) => ImGui.Begin(name, ref pOpen);
		public static System.Boolean Begin(System.String name, ref System.Boolean pOpen, ImGuiNET.ImGuiWindowFlags flags) => ImGui.Begin(name, ref pOpen, flags);
		public static System.Boolean BeginChild(System.String strId) => ImGui.BeginChild(strId);
		public static System.Boolean BeginChild(System.String strId, System.Numerics.Vector2 size) => ImGui.BeginChild(strId, size);
		public static System.Boolean BeginChild(System.String strId, System.Numerics.Vector2 size, System.Boolean border) => ImGui.BeginChild(strId, size, border);
		public static System.Boolean BeginChild(System.String strId, System.Numerics.Vector2 size, System.Boolean border, ImGuiNET.ImGuiWindowFlags flags) => ImGui.BeginChild(strId, size, border, flags);
		public static System.Boolean BeginChild(System.UInt32 id) => ImGui.BeginChild(id);
		public static System.Boolean BeginChild(System.UInt32 id, System.Numerics.Vector2 size) => ImGui.BeginChild(id, size);
		public static System.Boolean BeginChild(System.UInt32 id, System.Numerics.Vector2 size, System.Boolean border) => ImGui.BeginChild(id, size, border);
		public static System.Boolean BeginChild(System.UInt32 id, System.Numerics.Vector2 size, System.Boolean border, ImGuiNET.ImGuiWindowFlags flags) => ImGui.BeginChild(id, size, border, flags);
		public static System.Boolean BeginChildFrame(System.UInt32 id, System.Numerics.Vector2 size) => ImGui.BeginChildFrame(id, size);
		public static System.Boolean BeginChildFrame(System.UInt32 id, System.Numerics.Vector2 size, ImGuiNET.ImGuiWindowFlags flags) => ImGui.BeginChildFrame(id, size, flags);
		public static System.Boolean BeginCombo(System.String label, System.String previewValue) => ImGui.BeginCombo(label, previewValue);
		public static System.Boolean BeginCombo(System.String label, System.String previewValue, ImGuiNET.ImGuiComboFlags flags) => ImGui.BeginCombo(label, previewValue, flags);
		public static System.Boolean BeginDragDropSource() => ImGui.BeginDragDropSource();
		public static System.Boolean BeginDragDropSource(ImGuiNET.ImGuiDragDropFlags flags) => ImGui.BeginDragDropSource(flags);
		public static System.Boolean BeginDragDropTarget() => ImGui.BeginDragDropTarget();
		public static void BeginGroup() => ImGui.BeginGroup();
		public static System.Boolean BeginMainMenuBar() => ImGui.BeginMainMenuBar();
		public static System.Boolean BeginMenu(System.String label) => ImGui.BeginMenu(label);
		public static System.Boolean BeginMenu(System.String label, System.Boolean enabled) => ImGui.BeginMenu(label, enabled);
		public static System.Boolean BeginMenuBar() => ImGui.BeginMenuBar();
		public static System.Boolean BeginPopup(System.String strId) => ImGui.BeginPopup(strId);
		public static System.Boolean BeginPopup(System.String strId, ImGuiNET.ImGuiWindowFlags flags) => ImGui.BeginPopup(strId, flags);
		public static System.Boolean BeginPopupContextItem() => ImGui.BeginPopupContextItem();
		public static System.Boolean BeginPopupContextItem(System.String strId) => ImGui.BeginPopupContextItem(strId);
		public static System.Boolean BeginPopupContextItem(System.String strId, ImGuiNET.ImGuiMouseButton mouseButton) => ImGui.BeginPopupContextItem(strId, mouseButton);
		public static System.Boolean BeginPopupContextVoid() => ImGui.BeginPopupContextVoid();
		public static System.Boolean BeginPopupContextVoid(System.String strId) => ImGui.BeginPopupContextVoid(strId);
		public static System.Boolean BeginPopupContextVoid(System.String strId, ImGuiNET.ImGuiMouseButton mouseButton) => ImGui.BeginPopupContextVoid(strId, mouseButton);
		public static System.Boolean BeginPopupContextWindow() => ImGui.BeginPopupContextWindow();
		public static System.Boolean BeginPopupContextWindow(System.String strId) => ImGui.BeginPopupContextWindow(strId);
		public static System.Boolean BeginPopupContextWindow(System.String strId, ImGuiNET.ImGuiMouseButton mouseButton) => ImGui.BeginPopupContextWindow(strId, mouseButton);
		public static System.Boolean BeginPopupContextWindow(System.String strId, ImGuiNET.ImGuiMouseButton mouseButton, System.Boolean alsoOverItems) => ImGui.BeginPopupContextWindow(strId, mouseButton, alsoOverItems);
		public static System.Boolean BeginPopupModal(System.String name) => ImGui.BeginPopupModal(name);
		public static System.Boolean BeginPopupModal(System.String name, ref System.Boolean pOpen) => ImGui.BeginPopupModal(name, ref pOpen);
		public static System.Boolean BeginPopupModal(System.String name, ref System.Boolean pOpen, ImGuiNET.ImGuiWindowFlags flags) => ImGui.BeginPopupModal(name, ref pOpen, flags);
		public static System.Boolean BeginTabBar(System.String strId) => ImGui.BeginTabBar(strId);
		public static System.Boolean BeginTabBar(System.String strId, ImGuiNET.ImGuiTabBarFlags flags) => ImGui.BeginTabBar(strId, flags);
		public static System.Boolean BeginTabItem(System.String label) => ImGui.BeginTabItem(label);
		public static System.Boolean BeginTabItem(System.String label, ref System.Boolean pOpen) => ImGui.BeginTabItem(label, ref pOpen);
		public static System.Boolean BeginTabItem(System.String label, ref System.Boolean pOpen, ImGuiNET.ImGuiTabItemFlags flags) => ImGui.BeginTabItem(label, ref pOpen, flags);
		public static void BeginTooltip() => ImGui.BeginTooltip();
		public static void Bullet() => ImGui.Bullet();
		public static void BulletText(System.String fmt) => ImGui.BulletText(fmt);
		public static System.Boolean Button(System.String label) => ImGui.Button(label);
		public static System.Boolean Button(System.String label, System.Numerics.Vector2 size) => ImGui.Button(label, size);
		public static System.Single CalcItemWidth() => ImGui.CalcItemWidth();
		public static System.Numerics.Vector2 CalcTextSize(System.String text) => ImGui.CalcTextSize(text);
		public static void CaptureKeyboardFromApp() => ImGui.CaptureKeyboardFromApp();
		public static void CaptureKeyboardFromApp(System.Boolean wantCaptureKeyboardValue) => ImGui.CaptureKeyboardFromApp(wantCaptureKeyboardValue);
		public static void CaptureMouseFromApp() => ImGui.CaptureMouseFromApp();
		public static void CaptureMouseFromApp(System.Boolean wantCaptureMouseValue) => ImGui.CaptureMouseFromApp(wantCaptureMouseValue);
		public static System.Boolean Checkbox(System.String label, ref System.Boolean v) => ImGui.Checkbox(label, ref v);
		public static System.Boolean CheckboxFlags(System.String label, ref System.UInt32 flags, System.UInt32 flagsValue) => ImGui.CheckboxFlags(label, ref flags, flagsValue);
		public static void CloseCurrentPopup() => ImGui.CloseCurrentPopup();
		public static System.Boolean CollapsingHeader(System.String label) => ImGui.CollapsingHeader(label);
		public static System.Boolean CollapsingHeader(System.String label, ImGuiNET.ImGuiTreeNodeFlags flags) => ImGui.CollapsingHeader(label, flags);
		public static System.Boolean CollapsingHeader(System.String label, ref System.Boolean pOpen) => ImGui.CollapsingHeader(label, ref pOpen);
		public static System.Boolean CollapsingHeader(System.String label, ref System.Boolean pOpen, ImGuiNET.ImGuiTreeNodeFlags flags) => ImGui.CollapsingHeader(label, ref pOpen, flags);
		public static System.Boolean ColorButton(System.String descId, System.Numerics.Vector4 col) => ImGui.ColorButton(descId, col);
		public static System.Boolean ColorButton(System.String descId, System.Numerics.Vector4 col, ImGuiNET.ImGuiColorEditFlags flags) => ImGui.ColorButton(descId, col, flags);
		public static System.Boolean ColorButton(System.String descId, System.Numerics.Vector4 col, ImGuiNET.ImGuiColorEditFlags flags, System.Numerics.Vector2 size) => ImGui.ColorButton(descId, col, flags, size);
		public static System.UInt32 ColorConvertFloat4ToU32(System.Numerics.Vector4 @in) => ImGui.ColorConvertFloat4ToU32(@in);
		public static void ColorConvertHSVtoRGB(System.Single h, System.Single s, System.Single v, out System.Single outR, out System.Single outG, out System.Single outB) => ImGui.ColorConvertHSVtoRGB(h, s, v, out outR, out outG, out outB);
		public static void ColorConvertRGBtoHSV(System.Single r, System.Single g, System.Single b, out System.Single outH, out System.Single outS, out System.Single outV) => ImGui.ColorConvertRGBtoHSV(r, g, b, out outH, out outS, out outV);
		public static System.Numerics.Vector4 ColorConvertU32ToFloat4(System.UInt32 @in) => ImGui.ColorConvertU32ToFloat4(@in);
		public static System.Boolean ColorEdit3(System.String label, ref System.Numerics.Vector3 col) => ImGui.ColorEdit3(label, ref col);
		public static System.Boolean ColorEdit3(System.String label, ref System.Numerics.Vector3 col, ImGuiNET.ImGuiColorEditFlags flags) => ImGui.ColorEdit3(label, ref col, flags);
		public static System.Boolean ColorEdit4(System.String label, ref System.Numerics.Vector4 col) => ImGui.ColorEdit4(label, ref col);
		public static System.Boolean ColorEdit4(System.String label, ref System.Numerics.Vector4 col, ImGuiNET.ImGuiColorEditFlags flags) => ImGui.ColorEdit4(label, ref col, flags);
		public static System.Boolean ColorPicker3(System.String label, ref System.Numerics.Vector3 col) => ImGui.ColorPicker3(label, ref col);
		public static System.Boolean ColorPicker3(System.String label, ref System.Numerics.Vector3 col, ImGuiNET.ImGuiColorEditFlags flags) => ImGui.ColorPicker3(label, ref col, flags);
		public static System.Boolean ColorPicker4(System.String label, ref System.Numerics.Vector4 col) => ImGui.ColorPicker4(label, ref col);
		public static System.Boolean ColorPicker4(System.String label, ref System.Numerics.Vector4 col, ImGuiNET.ImGuiColorEditFlags flags) => ImGui.ColorPicker4(label, ref col, flags);
		public static System.Boolean ColorPicker4(System.String label, ref System.Numerics.Vector4 col, ImGuiNET.ImGuiColorEditFlags flags, ref System.Single refCol) => ImGui.ColorPicker4(label, ref col, flags, ref refCol);
		public static void Columns() => ImGui.Columns();
		public static void Columns(System.Int32 count) => ImGui.Columns(count);
		public static void Columns(System.Int32 count, System.String id) => ImGui.Columns(count, id);
		public static void Columns(System.Int32 count, System.String id, System.Boolean border) => ImGui.Columns(count, id, border);
	}
}
